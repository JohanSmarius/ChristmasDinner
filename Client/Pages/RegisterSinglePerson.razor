@page "/registersingleperson"

@inject HttpClient Http

<PageTitle>Register Single Person</PageTitle>

<h1>Register Single Person</h1>

<EditForm Model="@newSinglePerson" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newSinglePerson.Name" />
    </div>
    <div class="mb-3">
        <label for="town" class="form-label">Town</label>
        <InputText id="town" class="form-control" @bind-Value="newSinglePerson.Town" />
    </div>
    <div class="mb-3">
        <label for="age" class="form-label">Age</label>
        <InputNumber id="age" class="form-control" @bind-Value="newSinglePerson.Age" />
    </div>
    <div class="mb-3">
        <label for="family" class="form-label">Choose Family</label>
        <InputSelect id="family" class="form-control" @bind-Value="chosenFamilyId">
            <option value="">Select a family</option>
            @foreach (var family in availableFamilies)
            {
                <option value="@family.Id">@family.Name (@family.Town)</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (registrationAttempted)
{
    if (chosenFamily != null)
    {
        <h2>Chosen Family</h2>
        <p>Family Name: @chosenFamily.Name</p>
        <p>Town: @chosenFamily.Town</p>
        <p>Number of Seats: @chosenFamily.NumberOfSeats</p>
        <p>Number of Guests: @chosenFamily.Guests.Count</p>
    }
    else
    {
        <p>No matching family found in your town.</p>
    }
}

@code {
    private SinglePerson newSinglePerson = new SinglePerson();
    private List<Family> availableFamilies = new List<Family>();
    private string chosenFamilyId = string.Empty;
    private Family? chosenFamily;
    private bool registrationAttempted = false;

    protected override async Task OnInitializedAsync()
    {
        availableFamilies = await Http.GetFromJsonAsync<List<Family>>("api/getavailablefamilies");
    }

    private async Task HandleValidSubmit()
    {
        var requestData = new ChooseFamilyRequest
        {
            FamilyId = chosenFamilyId,
            SinglePerson = newSinglePerson
        };

        var response = await Http.PostAsJsonAsync("api/choosefamily", requestData);
        if (response.IsSuccessStatusCode)
        {
            chosenFamily = await response.Content.ReadFromJsonAsync<Family>();
        }
        else
        {
            chosenFamily = null;
        }
        registrationAttempted = true;
    }

    public class SinglePerson
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Town { get; set; } = string.Empty;
        public int Age { get; set; }
    }

    public class Family
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public string Town { get; set; } = string.Empty;
        public int NumberOfSeats { get; set; }
        public List<Guest> Guests { get; set; } = new List<Guest>();
    }

    public class Guest
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
    }

    public class ChooseFamilyRequest
    {
        public string FamilyId { get; set; } = string.Empty;
        public SinglePerson SinglePerson { get; set; } = new SinglePerson();
    }
}
